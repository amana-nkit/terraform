PS C:\> az login --allow-no-subscription --tenant "3d0ecda6-e265-404a-8aaa-556795fd3d1f"
The default web browser has been opened at https://login.microsoftonline.com/3d0ecda6-e265-404a-8aaa-556795fd3d1f/oauth2/authorize. Please continue the login in the web brows
er. If no web browser is available or if the web browser fails to open, use device code flow with `az login --use-device-code`.
You have logged in. Now let us find all the subscriptions to which you have access...
[
  {
    "cloudName": "AzureCloud",
    "homeTenantId": "3d0ecda6-e265-404a-8aaa-556795fd3d1f",
    "id": "c816f77e-07f5-4524-905b-c34f98b70637",
    "isDefault": true,
    "managedByTenants": [],
    "name": "Azure subscription 1",
    "state": "Enabled",
    "tenantId": "3d0ecda6-e265-404a-8aaa-556795fd3d1f",
    "user": {
      "name": "amanankit2021@outlook.com",
      "type": "user"
    }
  }
]

Requesting a Cloud Shell...
Connecting terminal...
aman@Azure:~$ cd "$HOME/clouddrive/Git"
aman@Azure:~/clouddrive/Git$ terraform init

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/azurerm from the dependency lock file
- Using previously-installed hashicorp/azurerm v1.35.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see  
any changes that are required for your infrastructure. All Terraform commands  
should now work.

If you ever set or change modules or backend configuration for Terraform,      
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
aman@Azure:~/clouddrive/Git$ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # azurerm_resource_group.test will be created
  + resource "azurerm_resource_group" "test" {
      + id       = (known after apply)
      + location = "westus"
      + name     = "TestRG1"
      + tags     = {
          + "environment" = "Production"
        }
    }

Plan: 1 to add, 0 to change, 0 to destroy.

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
aman@Azure:~/clouddrive/Git$ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # azurerm_resource_group.test will be created
  + resource "azurerm_resource_group" "test" {
      + id       = (known after apply)
      + location = "westus"
      + name     = "TestRG1"
      + tags     = {
          + "environment" = "Production"
        }
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

azurerm_resource_group.test: Creating...
azurerm_resource_group.test: Creation complete after 1s [id=/subscriptions/c816f77e-07f5-4524-905b-c34f98b70637/resourceGroups/TestRG1]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.


Reference: https://docs.microsoft.com/en-us/azure/developer/terraform/configure-vs-code-extension-for-terraform
